name: Build extension

on:
  push:
    branches:
      - master
env:
  VERSION: 1.0.${{github.run_number}}
  ARTIFACT_NAME: GarminConnect.Scheduler_${{env.VERSION}}

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run package:chrome
    - name: Update dist/manifest.json
      run: echo "`jq '.version="${{env.VERSION}}"' dist/manifest.json`" > dist/manifest.json
    - name: read dist/manifest.json
      run: cat dist/manifest.json
    - name: Archive artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{env.ARTIFACT_NAME}}
        path: |
          dist
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
      with:
        upload_url: ${{ github.event.release.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./${{env.ARTIFACT_NAME}}.zip
        asset_name: ${{env.ARTIFACT_NAME}}.zip
        asset_content_type: application/zip