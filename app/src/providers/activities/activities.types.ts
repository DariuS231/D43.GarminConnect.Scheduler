export interface IActivitiesContext {
  state: {  };
  actions: { get: (take?: number, skip?: number, from?: Date, to?: Date) => Promise<IActivity[]> };
}

export interface IActivitiesProps {}

export interface IActivityType {
  typeId: number;
  typeKey: string;
  parentTypeId: number;
  isHidden: boolean;
  restricted: boolean;
  trimmable: boolean;
  sortOrder?: any;
}

export interface IEventType {
  typeId: number;
  typeKey: string;
  sortOrder: number;
}

export interface IPrivacy {
  typeId: number;
  typeKey: string;
}

export interface ISummarizedDiveInfo {
  weight?: any;
  weightUnit?: any;
  visibility?: any;
  visibilityUnit?: any;
  surfaceCondition?: any;
  current?: any;
  waterType?: any;
  waterDensity?: any;
  summarizedDiveGases: any[];
  totalSurfaceTime?: any;
}

export interface ISplitSummary {
  noOfSplits?: number | null;
  maxGradeValue?: any;
  totalAscent: number;
  duration: number;
  splitType: string;
  numClimbSends: number;
  maxElevationGain: number;
  averageElevationGain: number;
  maxDistance: number;
  distance: number;
  averageSpeed: number;
  maxSpeed: number;
  mode?: any;
  numFalls: number;
  avgStress?: any;
  avgStressWin?: any;
  avgStressLoss?: any;
  avgStressDraw?: any;
  gamesWon?: any;
  gamesNotWon?: any;
  gamesAverageWon?: any;
}

export interface IActivity {
  activityId: any;
  activityName: string;
  description?: any;
  startTimeLocal: string;
  startTimeGMT: string;
  activityType: IActivityType;
  eventType: IEventType;
  comments?: any;
  parentId?: any;
  distance: number;
  duration: number;
  elapsedDuration: number;
  movingDuration: number;
  elevationGain: number;
  elevationLoss: number;
  averageSpeed: number;
  maxSpeed: number;
  startLatitude: number;
  startLongitude: number;
  hasPolyline: boolean;
  ownerId: number;
  ownerDisplayName: string;
  ownerFullName: string;
  ownerProfileImageUrlSmall: string;
  ownerProfileImageUrlMedium: string;
  ownerProfileImageUrlLarge: string;
  calories: number;
  averageHR: number;
  maxHR: number;
  averageRunningCadenceInStepsPerMinute: number;
  maxRunningCadenceInStepsPerMinute: number;
  averageBikingCadenceInRevPerMinute?: any;
  maxBikingCadenceInRevPerMinute?: any;
  averageSwimCadenceInStrokesPerMinute?: any;
  maxSwimCadenceInStrokesPerMinute?: any;
  averageSwolf?: any;
  activeLengths?: any;
  steps: number;
  conversationUuid?: any;
  conversationPk?: any;
  numberOfActivityLikes?: any;
  numberOfActivityComments?: any;
  likedByUser?: any;
  commentedByUser?: any;
  activityLikeDisplayNames?: any;
  activityLikeFullNames?: any;
  activityLikeProfileImageUrls?: any;
  requestorRelationship?: any;
  userRoles: string[];
  privacy: IPrivacy;
  userPro: boolean;
  courseId?: any;
  poolLength?: any;
  unitOfPoolLength?: any;
  hasVideo: boolean;
  videoUrl?: any;
  timeZoneId: number;
  beginTimestamp: any;
  sportTypeId: number;
  avgPower: number;
  maxPower: number;
  aerobicTrainingEffect: number;
  anaerobicTrainingEffect: number;
  strokes?: any;
  normPower: number;
  leftBalance?: any;
  rightBalance?: any;
  avgLeftBalance?: any;
  max20MinPower?: any;
  avgVerticalOscillation?: number | null;
  avgGroundContactTime?: number | null;
  avgStrideLength: number;
  avgFractionalCadence?: any;
  maxFractionalCadence?: any;
  trainingStressScore?: any;
  intensityFactor?: any;
  vO2MaxValue?: number | null;
  avgVerticalRatio?: number | null;
  avgGroundContactBalance?: number | null;
  lactateThresholdBpm?: number | null;
  lactateThresholdSpeed?: number | null;
  maxFtp?: any;
  avgStrokeDistance?: any;
  avgStrokeCadence?: any;
  maxStrokeCadence?: any;
  workoutId?: number | null;
  avgStrokes?: any;
  minStrokes?: any;
  deviceId: any;
  minTemperature?: any;
  maxTemperature?: any;
  minElevation: number;
  maxElevation: number;
  avgDoubleCadence?: any;
  maxDoubleCadence: number;
  summarizedExerciseSets?: any;
  maxDepth?: any;
  avgDepth?: any;
  surfaceInterval?: any;
  startN2?: any;
  endN2?: any;
  startCns?: any;
  endCns?: any;
  summarizedDiveInfo: ISummarizedDiveInfo;
  activityLikeAuthors?: any;
  avgVerticalSpeed?: number | null;
  maxVerticalSpeed: number;
  floorsClimbed?: any;
  floorsDescended?: any;
  manufacturer: string;
  diveNumber?: any;
  locationName: string;
  bottomTime?: any;
  lapCount: number;
  endLatitude: number;
  endLongitude: number;
  minAirSpeed?: any;
  maxAirSpeed?: any;
  avgAirSpeed?: any;
  avgWindYawAngle?: any;
  minCda?: any;
  maxCda?: any;
  avgCda?: any;
  avgWattsPerCda?: any;
  flow?: any;
  grit?: any;
  jumpCount?: any;
  caloriesEstimated?: any;
  caloriesConsumed?: any;
  waterEstimated: number;
  waterConsumed?: any;
  maxAvgPower_1?: any;
  maxAvgPower_2?: any;
  maxAvgPower_5?: any;
  maxAvgPower_10?: any;
  maxAvgPower_20?: any;
  maxAvgPower_30?: any;
  maxAvgPower_60?: any;
  maxAvgPower_120?: any;
  maxAvgPower_300?: any;
  maxAvgPower_600?: any;
  maxAvgPower_1200?: any;
  maxAvgPower_1800?: any;
  maxAvgPower_3600?: any;
  maxAvgPower_7200?: any;
  maxAvgPower_18000?: any;
  excludeFromPowerCurveReports?: any;
  totalSets?: any;
  activeSets?: any;
  totalReps?: any;
  minRespirationRate?: number | null;
  maxRespirationRate?: number | null;
  avgRespirationRate?: number | null;
  trainingEffectLabel: string;
  activityTrainingLoad: number;
  avgFlow?: any;
  avgGrit?: any;
  minActivityLapDuration: number;
  avgStress?: any;
  startStress?: any;
  endStress?: any;
  differenceStress?: any;
  maxStress?: any;
  aerobicTrainingEffectMessage: string;
  anaerobicTrainingEffectMessage: string;
  splitSummaries: ISplitSummary[];
  hasSplits: boolean;
  moderateIntensityMinutes: number;
  vigorousIntensityMinutes: number;
  maxBottomTime?: any;
  hasSeedFirstbeatProfile?: any;
  calendarEventId?: any;
  calendarEventUuid?: any;
  avgGradeAdjustedSpeed: number;
  avgWheelchairCadence?: any;
  maxWheelchairCadence?: any;
  gameName?: any;
  differenceBodyBattery?: any;
  gameType?: any;
  autoCalcCalories: boolean;
  favorite: boolean;
  decoDive: boolean;
  elevationCorrected: boolean;
  atpActivity: boolean;
  purposeful: boolean;
  pr: boolean;
  manualActivity: boolean;
  parent: boolean;
}
